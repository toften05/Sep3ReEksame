@page "/CreateCoach"
@using HttpClients.ClientInterfaces
@using Domain.DTOs
@using Domain.Model
@using HttpClients
@inject ICoachService CoachService
@inject ITeamService TeamService;

<div class="card">
    <h3>Create Coach</h3>
      <EditForm Model="this">
    <div class="form-group field">
        <label>Fullname:</label>
        <input type="text" @bind="name" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
         <label>Date of birth:</label>
        <InputDate @bind-Value="birthday"/>
        
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Initials:</label>
        <input type="text" @bind="initials" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Email:</label>
        <input type="text" @bind="email" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Role:</label>
        <input type="text" @bind="role" @bind:event="oninput"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
        
    </div>
    
    <div class="form-group field">
            <label>Team:</label>
            <input type="text" @bind="teamName" @bind:event="oninput"/>
            @if (!string.IsNullOrEmpty(resultMsg))
            {
                <label style="color: @color">@resultMsg</label>
            }
        </div>
    
     @if (teams != null)
                    {
                        <select @bind="@teamName">
                            @foreach (var team in teams)
                            {
                                <option value="@team.teamName">@team.teamName</option>
                            }
                        </select>
                    }
                    else
                    {
                        <p>Loading teams...</p>
                    }
   
      <div class="button-row">
          <button @onclick="Create" 
                  disabled="@(string.IsNullOrEmpty(name))" class="acceptbtn">Create</button>
      </div>
      </EditForm>
</div>
@code {
    private string name = "";
    public DateTime birthday = DateTime.Today;
    public string initials = "";
    public string email = "";
    public string role = "";
    public string teamName = "";
    private IEnumerable<Team>? teams;
    private string resultMsg = "";
    private string color = "";
    private string msg = "";
    
    protected override async Task OnInitializedAsync()
    {
        msg = "";
        try
        {
            teams =  await TeamService.getALlTeamsAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            msg = e.Message;
        }
    
    }

    private async Task Create()
    {
        resultMsg = "";
 
        try
        {
            await CoachService.CreateAsync(new CoachCreationDto(name, birthday, initials, email, role, teamName));
            name = "";
            initials = "";
            email = "";
            role = "";
            resultMsg = "Coach successfully created";
            color = "green";
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            resultMsg = e.Message;
            color = "red";
        }
    }  
}